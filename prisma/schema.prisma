generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String?
  role           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Country {
  id         String   @id @default(cuid())
  name       String   @unique
  slug       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cities     City[]
  routesFrom Route[]  @relation("DepartureCountry")
  routesTo   Route[]  @relation("DestinationCountry")

  @@index([name])
  @@index([slug])
}

model City {
  id         String   @id @default(cuid())
  name       String
  slug       String
  latitude   Float?
  longitude  Float?
  isPlaceholder Boolean @default(false) // Flag for placeholder cities
  countryId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  country    Country  @relation(fields: [countryId], references: [id])
  routesFrom Route[]  @relation("DepartureCity")
  routesTo   Route[]  @relation("DestinationCity")
  hotels     Hotel[]

  @@unique([name, countryId])
  @@unique([slug, countryId])
  @@index([countryId])
  @@index([name])
  @@index([slug])
}

model Hotel {
  id        String   @id @default(cuid())
  name      String
  cityId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  city      City     @relation(fields: [cityId], references: [id])
  routes    Route[]  @relation("RouteHotels")

  @@index([cityId])
  @@index([name])
}

model Amenity {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  routes    Route[]  @relation("RouteAmenities")

  @@index([name])
}

model Route {
  id                   String    @id @default(cuid())
  departureCityId      String
  departureCountryId   String
  destinationCityId    String
  destinationCountryId String
  routeSlug            String    @unique
  displayName          String    @default("")
  viatorWidgetCode     String
  seoDescription       String?
  additionalInstructions String?
  otherStops          String?
  travelTime          String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  metaDescription      String?
  metaKeywords         String?
  metaTitle            String?
  isAirportPickup      Boolean   @default(false)
  isAirportDropoff     Boolean   @default(false)
  isCityToCity         Boolean   @default(true) // Default to true if others are false
  isPrivateDriver      Boolean   @default(false) // New type
  isSightseeingShuttle Boolean   @default(false) // New type
  mapWaypoints         Json?     // Stores Google Maps directions or array of stops for tours
  departureCity        City      @relation("DepartureCity", fields: [departureCityId], references: [id])
  departureCountry     Country   @relation("DepartureCountry", fields: [departureCountryId], references: [id])
  destinationCity      City      @relation("DestinationCity", fields: [destinationCityId], references: [id])
  destinationCountry   Country   @relation("DestinationCountry", fields: [destinationCountryId], references: [id])
  amenities           Amenity[]  @relation("RouteAmenities")
  hotelsServed        Hotel[]    @relation("RouteHotels")

  @@index([routeSlug])
  @@index([displayName])
  @@index([departureCityId])
  @@index([departureCountryId])
  @@index([destinationCityId])
  @@index([destinationCountryId])
  @@index([createdAt])
}
