generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String?
  role           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Country {
  id         String   @id @default(cuid())
  name       String   @unique
  slug       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cities     City[]
  routesFrom Route[]  @relation("DepartureCountry")
  routesTo   Route[]  @relation("DestinationCountry")

  @@index([name])
  @@index([slug])
}

model City {
  id            String   @id @default(cuid())
  name          String
  slug          String
  latitude      Float?
  longitude     Float?
  countryId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isPlaceholder Boolean  @default(false)
  country       Country  @relation(fields: [countryId], references: [id])
  hotels        Hotel[]
  routesFrom    Route[]  @relation("DepartureCity")
  routesTo      Route[]  @relation("DestinationCity")

  @@unique([name, countryId])
  @@unique([slug, countryId])
  @@index([countryId])
  @@index([name])
  @@index([slug])
}

model Hotel {
  id        String   @id @default(cuid())
  name      String
  cityId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  city      City     @relation(fields: [cityId], references: [id])
  routes    Route[]  @relation("RouteHotels")

  @@index([cityId])
  @@index([name])
}

model Amenity {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  iconName  String?
  routes    Route[]  @relation("RouteAmenities")

  @@index([name])
}

model Route {
  id                     String    @id @default(cuid())
  departureCityId        String
  departureCountryId     String
  destinationCityId      String
  destinationCountryId   String
  routeSlug              String    @unique
  viatorWidgetCode       String
  seoDescription         String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  metaDescription        String?
  metaKeywords           String?
  metaTitle              String?
  displayName            String    @default("")
  otherStops             String?
  travelTime             String?
  isAirportDropoff       Boolean   @default(false)
  isAirportPickup        Boolean   @default(false)
  isCityToCity           Boolean   @default(true)
  additionalInstructions String?
  isPrivateDriver        Boolean   @default(false)
  isSightseeingShuttle   Boolean   @default(false)
  mapWaypoints           Json?
  possibleNearbyStops    Json?
  viatorDestinationLink String? // âœ… New field for destination tour link
  departureCity          City      @relation("DepartureCity", fields: [departureCityId], references: [id])
  departureCountry       Country   @relation("DepartureCountry", fields: [departureCountryId], references: [id])
  destinationCity        City      @relation("DestinationCity", fields: [destinationCityId], references: [id])
  destinationCountry     Country   @relation("DestinationCountry", fields: [destinationCountryId], references: [id])
  amenities              Amenity[] @relation("RouteAmenities")
  hotelsServed           Hotel[]   @relation("RouteHotels")

  @@index([routeSlug])
  @@index([displayName])
  @@index([departureCityId])
  @@index([departureCountryId])
  @@index([destinationCityId])
  @@index([destinationCountryId])
  @@index([createdAt])
}
